# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.7.0
        with:
          # Set always-auth in npmrc.
          # always-auth: # optional, default is false
          # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
          node-version: 18.16.1
          # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions.
          # node-version-file: # optional
          # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
          # architecture: # optional
          # Set this option if you want the action to check for the latest available version that satisfies the version spec.
          # check-latest: # optional
          # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
          # registry-url: # optional
          # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
          # scope: # optional
          # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          # token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
          # cache: # optional
          # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
          # cache-dependency-path: # optional
      - name: PHP Code Sniffer (php-actions)
  # You may pin to the exact commit or the version.
  # uses: php-actions/phpcs@dfdd77a6edfc6d0d0f194bdf0c934c8d841ea2fa
        uses: php-actions/phpcs@v1.0.0
        with:
    # What version of PHPCS to use
    # version: # optional, default is latest
    # What version of PHP to use
    # php_version: # optional, default is latest
    # Path to a vendored phpcs binary
    # vendored_phpcs_path: # optional
    # One or more files and/or directories to check
          path: /api/ 
    # The name or path of the coding standard to use
    # standard: 
    # A comma separated list of sniff codes to include checking (all sniffs must be part of the specified standard)
    # sniffs: # optional
    # A comma separated list of sniff codes to exclude from checking (all sniffs must be part of the specified standard)
    # exclude: # optional
    # A comma separated list of patterns to ignore files and directories
    # ignore: # optional
    # The number of spaces each tab represents
    # tab_width: # optional
    # Print either the "full", "xml", "checkstyle", "csv", "json", "junit", "emacs", "source", "summary", "diff", "svnblame", "gitblame", "hgblame" or "notifysend" report, or specify the path to a custom report class, (the "full" report is printed by default)
    # report: # default is full
    # Write the report to the specified file path
    # report_file: 
    # How many columns wide screen reports should be printed or set to "auto" to use current screen width, where supported
    # report_width: # optional
    # A path to strip from the front of file paths inside reports
    # basepath: # optional
    # A comma separated list of files to run before processing begins
    # bootstrap: # optional
    # The encoding of the files being checked (default is utf-8)
    # encoding: # optional
    # A comma separated list of file extensions to check. The type of the file can be specified using: ext/type e.g., module/php,es/js
    # extensions: # optional
    # The minimum severity required to display an error or warning
    # severity: # optional
    # The minimum severity required to display an error
    # error_severity: # optional
    # The minimum severity required to display a warning
    # warning_severity: # optional
    # Extra arguments to pass to the phpcs binary
    # args: # optional

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
